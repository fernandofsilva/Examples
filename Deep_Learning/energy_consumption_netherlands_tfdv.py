# -*- coding: utf-8 -*-
"""energy_consumption_netherlands_tfdv.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1VyCOriI4rj3KgFYTCk7OHrWJ80Gil8kY

# TensorFlow Data **Validation**

TensorFlow Data Validation (TFDV) is a library for exploring and validating  machine learning data. It is designed to be highly scalable and to work  well with TensorFlow and TensorFlow Extended (TFX). This notebook will explore the features of TFDV using the [Energy consumption of the Netherlands](https://www.kaggle.com/lucabasa/dutch-energy) dataset from Kaggle.

### Importing the data

Tensorflow works with datafrom Csv files or TFRecords, the dataset is composed by several Csv files, it contains contains information about eletricity and Gas, in the analysis it will be use the eletricity data for **Liander** and **Stedin** regions, the data is available in my Google Drive, but you can download at the Link above in Kaggle Datasets. In the analysis we'll use the Liander region as *Train* dataset and the Stedin region as *Test* dataset.
"""

from google.colab import drive
drive.mount('/content/gdrive')

# Import libraries
from __future__ import print_function
import sys, os
import tempfile, urllib, zipfile

# Confirm it is using Python 2 due TFDV just works on python 2
assert sys.version_info.major is 2, 'Oops, not running Python 2'

# Set up some globals for our file paths
BASE_DIR = tempfile.mkdtemp()
DATA_DIR = os.path.join(BASE_DIR, 'Electricity')

# Download the zip file from GCP and unzip it
zip = '/content/gdrive/My Drive/Datasets/dutch-energy.zip'
zipfile.ZipFile(zip).extractall(BASE_DIR)
zipfile.ZipFile(zip).close()

print("Here's what we downloaded:")
!ls -lR {os.path.join(BASE_DIR, 'Electricity')}

"""### TFDV

The TFDV is not available on the default packages in Google Colab, it is necessary install it using pip
"""

!pip install -q tensorflow_data_validation
import tensorflow_data_validation as tfdv

print('TFDV version: {}'.format(tfdv.version.__version__))

"""### Compute and visualize statistics

TFDV can compute descriptive statistics that provide a quick overview of the data in terms of the features that are present and the shapes of their value distributions.

First use tfdv.generate_statistics_from_csv to compute statistics for hole data, TFDV can compute descriptive statistics, generate_statistics_from_csv works specifying a file pattern. The pattern can contain glob characters  (*, ?, [...] and sets).
"""

# Generate stats for Ste
train_stats = tfdv.generate_statistics_from_csv(data_location=DATA_DIR+'/l*')

# Visualize
tfdv.visualize_statistics(train_stats)

"""#### Results

it is possible to check the distribution of each variable (max, min, median, mean, std and zeros), how much missing data to each feature, the numeric and categorical variables are shown separated.

The charts show the purchase_are has 40% missing data, cliking in the opção "Show Raw Data" it is possible to see the details results to each feature.

## Infer a schema

Infering a schema we save a lot of initial work, the scheme defines the data that are relevant to the model, for example, the type of each feature (numerical or categorical), for categorical features the schema also defines the domain - the list of acceptable values, TFDV provides a initial version of the schema based on the descriptive statistics.

Define the schema is importante because the mode pipeline relys on it also it is provide a documentation of the data.
"""

# Define the schame
train_schema = tfdv.infer_schema(statistics=train_stats)

# Display the schema 
tfdv.display_schema(schema=train_schema)

"""### Check evaluation data for errors

We checked and infer a schema for the train dataset, the schema also should be consistent in the test dataset, it should have the same range of values in the numerical features, if the data is different between the test and train data we'll have problems in the model.
"""

# Compute stats for evaluation data
test_stats = tfdv.generate_statistics_from_csv(data_location=DATA_DIR+'/s*')

# Compare evaluation data with training data
tfdv.visualize_statistics(lhs_statistics=test_stats, 
                          rhs_statistics=train_stats,
                          lhs_name='Test_Dataset', 
                          rhs_name='Train_Dataset')

"""#### Results

A good feature of the TFDV it shows in the plot both the train and test stats overlaid, it is possible to check the distribuition visually, it can speedy the change in the schema when necessary.

Looking in the results, we can infer easily the data from Liander region can't be use to predict the values on Stedin region, all the median, meadn, std, missing values are different between the dataset, but now we don't make any change and will continue with the TFDV analysis.
"""