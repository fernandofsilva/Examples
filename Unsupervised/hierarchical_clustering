#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
@author: esssfff
"""

# Import numpy
import numpy as np

path = "/home/esssfff/Documents/Github/Examples/Datasets/"

samples = np.genfromtxt(path+'seeds_dataset.txt', delimiter='\t')
samples = samples[np.random.choice(samples.shape[0], 42, replace=False)]

# Perform the necessary imports
from scipy.cluster.hierarchy import linkage, dendrogram
import matplotlib.pyplot as plt

x = ["Kama wheat", "Rosa wheat", "Canadian wheat"]
varieties = [item for item in x for i in range(14)]

# Calculate the linkage: mergings
mergings = linkage(samples, method='complete')

# Plot the dendrogram, using varieties as labels
dendrogram(mergings,
           labels=varieties,
           leaf_rotation=90,
           leaf_font_size=6,
)
plt.show()

movements = np.genfromtxt(path+'company-stock-movements-2010-2015-incl.csv', 
    delimiter=',')
movements = movements[1:,1:]

# Import normalize
from sklearn.preprocessing import normalize
import pandas as pd

# Normalize the movements: normalized_movements
normalized_movements = normalize(movements)

# Calculate the linkage: mergings
mergings = linkage(normalized_movements, method='complete')

companies = pd.read_csv(path+'company-stock-movements-2010-2015-incl.csv', 
    usecols=['Unnamed: 0'])['Unnamed: 0'].tolist()

# Plot the dendrogram
dendrogram(mergings, labels=companies, leaf_rotation=90, leaf_font_size=6)
plt.show()

del companies, mergings, movements, normalized_movements

# Perform the necessary imports
import matplotlib.pyplot as plt
from scipy.cluster.hierarchy import linkage, dendrogram

# Calculate the linkage: mergings
mergings = linkage(samples, method='single')

# Plot the dendrogram
dendrogram(mergings, labels=varieties, leaf_rotation=90, leaf_font_size=6)
plt.show()

# Perform the necessary imports
import pandas as pd
from scipy.cluster.hierarchy import fcluster

# Use fcluster to extract labels: labels
labels = fcluster(mergings, 6, criterion='distance')

# Create a DataFrame with labels and varieties as columns: df
df = pd.DataFrame({'labels': labels, 'varieties': varieties})

# Create crosstab: ct
ct = pd.crosstab(df['labels'], df['varieties'])

# Display ct
print(ct)

del ct, df, labels, varieties, x

samples = np.genfromtxt(path+'seeds_dataset.txt', delimiter='\t')
variety_numbers = samples[:,7]
samples = samples[:,1:7]

# Import TSNE
from sklearn.manifold import TSNE

# Create a TSNE instance: model
model = TSNE(learning_rate=200)

# Apply fit_transform to samples: tsne_features
tsne_features = model.fit_transform(samples)

# Select the 0th feature: xs
xs = tsne_features[:,0]

# Select the 1st feature: ys
ys = tsne_features[:,1]

# Scatter plot, coloring by variety_numbers
plt.scatter(xs, ys, c=variety_numbers)
plt.show()

del mergings, samples, tsne_features, variety_numbers, xs, ys

movements = np.genfromtxt(path+'company-stock-movements-2010-2015-incl.csv', 
    delimiter=',')
movements = movements[1:,1:]

companies = pd.read_csv(path+'company-stock-movements-2010-2015-incl.csv', 
    usecols=['Unnamed: 0'])['Unnamed: 0'].tolist()

# Normalize the movements: normalized_movements
normalized_movements = normalize(movements)

# Create a TSNE instance: model
model = TSNE(learning_rate=50)

# Apply fit_transform to normalized_movements: tsne_features
tsne_features = model.fit_transform(normalized_movements)

# Select the 0th feature: xs
xs = tsne_features[:,0]

# Select the 1th feature: ys
ys = tsne_features[:,1]

# Scatter plot
plt.scatter(xs, ys, alpha=0.5)

# Annotate the points
for x, y, company in zip(xs, ys, companies):
    plt.annotate(company, (x, y), fontsize=5, alpha=0.75)
plt.show()

del companies, company, movements, normalized_movements, tsne_features, x, xs, y, ys

















